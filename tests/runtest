#!/bin/bash

# Copyright 2012 Nikolay Orlyuk
# Distributed under the terms of the GNU General Public License v2

if [ -t 2 ]; then
    msg() { echo -e " \e[0;37m>> \e[0;32m${*} \e[0m" >&2; }
    err() { echo -e " \e[1;31m!! \e[0;33m${*} \e[0m" >&2; }
else
    msg() { echo " >> $*" >&2; }
    err() { echo " !! $*" >&2; }
fi

die() {
    err "$*"
    exit 1
}

trap "die 'Abort by user'" INT


TESTDIR="$(cd $(dirname "$0") && pwd)"
[[ -n "$TESTDIR" && -d "$TESTDIR" && -d "$TESTDIR/playground" ]] || die "Failed to determine test dir from script path \"$0\""
PLAYDIR="$TESTDIR/playground"
mkdir -p "$PLAYDIR" || die "Failed to create playground dir $PLAYDIR"

export PATH="$TESTDIR/..:$PATH"

stepno=0

step() {
    let stepno+=1
    msg "#${stepno}. $*"
}

cmd() {
    "$@" || die "Exit status $? for cmd: $*"
}

run() {
    let stepno+=1
    msg "#${stepno}. Cmd: $*"
    cmd "$@"
}

prepare() {
    stepno=0
    step "Prepearing playground..."
    rm -rf "$PLAYDIR"/{repo,ws-*}
    cmd svnadmin create "$PLAYDIR"/repo
    SVNROOT="file://$PLAYDIR/repo"
    cmd svn mkdir -m 'initial hierarchy' "$SVNROOT"/{tags,trunk,branches}
}

ws() {
    [[ -n "$1" ]] || die "Missing argument for cmd 'ws'"
    current_ws="$1"
    current_ws_dir="$PLAYDIR/ws-${1##*/}"
    [[ "$current_ws_dir" == "$PWD" ]] && return
    if [[ -d "$current_ws_dir" ]]; then
        msg "back to $1"
        cmd cd "$current_ws_dir"
        svnup
    else
        checkout "$1"
    fi
}

checkout() {
    [ -n "$1" ] || die "Missing argument for cmd 'ws'"
    current_ws="$1"
    current_ws_dir="$PLAYDIR/ws-${1##*/}"

    cd "$PLAYDIR"
    [[ -d "$current_ws_dir" ]] && cmd rm -rf "$current_ws_dir"

    msg "checking out $1"
    cmd svn co "$SVNROOT/$1" "$current_ws_dir"

    cmd cd "$current_ws_dir"
}

branch() {
    step "creating branch $1"
    cmd svn cp -m "Step ${stepno}: creating branch $1" file://"$PLAYDIR"/repo/{trunk,branches/"$1"}
}

commit() {
    step "commit to $current_ws"
    cmd svn commit -m "Step ${stepno}: $*"
    any_commit=1
}

svnup() {
    [ -n "$any_commit" ] || return
    step "updating $current_ws"
    cmd svn up
    any_commit=
}

assert_mergeinfo() {
    [[ -n "$1" ]] || die "Missing argument for assert_mergeinfo"
    step "asserting that mergeinfo matches with $1"
    cmd svn propget -R svn:mergeinfo > .mergeinfo.txt
    diff -u "$TESTDIR/$1" .mergeinfo.txt || die "Assertion failed"
}

run_test() {
    msg "Running ${1##*/}"
    prepare
    source "$1"
}

if [[ "$1" == "-wrapped" ]]; then
    run_test "$2"
else
    total=0
    fails=0

    call_test() {
        let total+=1
        "$TESTDIR/runtest" -wrapped "$testfile" || let fails+=1
    }

    if [[ -z "$*" ]]; then
        for testfile in "$TESTDIR"/test-*; do
            call_test "$testfile"
        done
    else
        for testfile in "$@"; do
            call_test "$testfile"
        done
    fi

    [[ "$fails" -lt "$total" ]] && msg "$(($total-$fails))/$total tests passed"
    [[ "$fails" -gt 0 ]] && die "$fails/$total tests failed"
fi

